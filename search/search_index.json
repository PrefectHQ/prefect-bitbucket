{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-bitbucket Welcome! Prefect integrations for working with Bitbucket repositories. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-bitbucket with pip : pip install prefect-bitbucket Then, register to view the block on Prefect Cloud: prefect block register -m prefect_bitbucket Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow Load a pre-existing BitBucketCredentials block from prefect import flow from prefect_bitbucket.credentials import BitBucketCredentials @flow def use_stored_bitbucket_creds_flow (): bitbucket_credentials_block = BitBucketCredentials . load ( \"BLOCK_NAME\" ) return bitbucket_credentials_block use_stored_bitbucket_creds_flow () Create a new BitBucketCredentials block in a flow from prefect import flow from prefect_bitbucket.credentials import BitBucketCredentials @flow def create_new_bitbucket_creds_flow (): bitbucket_credentials_block = BitBucketCredentials ( token = \"my-token\" , username = \"my-username\" ) create_new_bitbucket_creds_flow () Create a BitBucketRepository block for a public repo from prefect_bitbucket import BitBucketRepository public_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" # Creates a public BitBucket repository BitBucketRepository block public_bitbucket_block = BitBucketRepository ( repository = public_repo ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) public_bitbucket_block . save ( \"my-bitbucket-block\" ) Create a BitBucketRepository block for a public repo at a specific branch or tag from prefect_bitbucket import BitBucketRepository public_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" # Creates a public BitBucket repository BitBucketRepository block branch_bitbucket_block = BitBucketRepository ( reference = \"my-branch-or-tag\" , # e.g \"master\" repository = public_repo ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) branch_bitbucket_block . save ( \"my-bitbucket-branch-block\" ) Create a new BitBucketCredentials block and a BitBucketRepository block for a private repo from prefect_bitbucket import BitBucketCredentials , BitBucketRepository # For a private repo, we need credentials to access it bitbucket_credentials_block = BitBucketCredentials ( token = \"my-token\" , username = \"my-username\" # optional ) # Saves the BitBucketCredentials block to your Prefect workspace (in the Blocks tab) bitbucket_credentials_block . save ( name = \"my-bitbucket-credentials-block\" ) # Creates a private BitBucket repository BitBucketRepository block private_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" private_bitbucket_block = BitBucketRepository ( repository = private_repo , bitbucket_credentials = bitbucket_credentials_block ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) private_bitbucket_block . save ( name = \"my-private-bitbucket-block\" ) Use a preexisting BitBucketCredentials block to create a BitBucketRepository block for a private repo from prefect_bitbucket import BitBucketCredentials , BitBucketRepository # Loads a preexisting BitBucketCredentials block BitBucketCredentials . load ( \"my-bitbucket-credentials-block\" ) # Creates a private BitBucket repository BitBucketRepository block private_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" private_bitbucket_block = BitBucketRepository ( repository = private_repo , bitbucket_credentials = bitbucket_credentials_block ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) private_bitbucket_block . save ( name = \"my-private-bitbucket-block\" ) Resources If you encounter any bugs while using prefect-bitbucket , feel free to open an issue in the prefect-bitbucket repository. If you have any questions or issues while using prefect-bitbucket , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-bitbucket for updates too! Development If you'd like to install a version of prefect-bitbucket for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-bitbucket.git cd prefect-bitbucket/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-bitbucket","text":"","title":"prefect-bitbucket"},{"location":"#welcome","text":"Prefect integrations for working with Bitbucket repositories.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-bitbucket with pip : pip install prefect-bitbucket Then, register to view the block on Prefect Cloud: prefect block register -m prefect_bitbucket Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"","title":"Write and run a flow"},{"location":"#load-a-pre-existing-bitbucketcredentials-block","text":"from prefect import flow from prefect_bitbucket.credentials import BitBucketCredentials @flow def use_stored_bitbucket_creds_flow (): bitbucket_credentials_block = BitBucketCredentials . load ( \"BLOCK_NAME\" ) return bitbucket_credentials_block use_stored_bitbucket_creds_flow ()","title":"Load a pre-existing BitBucketCredentials block"},{"location":"#create-a-new-bitbucketcredentials-block-in-a-flow","text":"from prefect import flow from prefect_bitbucket.credentials import BitBucketCredentials @flow def create_new_bitbucket_creds_flow (): bitbucket_credentials_block = BitBucketCredentials ( token = \"my-token\" , username = \"my-username\" ) create_new_bitbucket_creds_flow ()","title":"Create a new BitBucketCredentials block in a flow"},{"location":"#create-a-bitbucketrepository-block-for-a-public-repo","text":"from prefect_bitbucket import BitBucketRepository public_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" # Creates a public BitBucket repository BitBucketRepository block public_bitbucket_block = BitBucketRepository ( repository = public_repo ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) public_bitbucket_block . save ( \"my-bitbucket-block\" )","title":"Create a BitBucketRepository block for a public repo"},{"location":"#create-a-bitbucketrepository-block-for-a-public-repo-at-a-specific-branch-or-tag","text":"from prefect_bitbucket import BitBucketRepository public_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" # Creates a public BitBucket repository BitBucketRepository block branch_bitbucket_block = BitBucketRepository ( reference = \"my-branch-or-tag\" , # e.g \"master\" repository = public_repo ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) branch_bitbucket_block . save ( \"my-bitbucket-branch-block\" )","title":"Create a BitBucketRepository block for a public repo at a specific branch or tag"},{"location":"#create-a-new-bitbucketcredentials-block-and-a-bitbucketrepository-block-for-a-private-repo","text":"from prefect_bitbucket import BitBucketCredentials , BitBucketRepository # For a private repo, we need credentials to access it bitbucket_credentials_block = BitBucketCredentials ( token = \"my-token\" , username = \"my-username\" # optional ) # Saves the BitBucketCredentials block to your Prefect workspace (in the Blocks tab) bitbucket_credentials_block . save ( name = \"my-bitbucket-credentials-block\" ) # Creates a private BitBucket repository BitBucketRepository block private_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" private_bitbucket_block = BitBucketRepository ( repository = private_repo , bitbucket_credentials = bitbucket_credentials_block ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) private_bitbucket_block . save ( name = \"my-private-bitbucket-block\" )","title":"Create a new BitBucketCredentials block and a BitBucketRepository block for a private repo"},{"location":"#use-a-preexisting-bitbucketcredentials-block-to-create-a-bitbucketrepository-block-for-a-private-repo","text":"from prefect_bitbucket import BitBucketCredentials , BitBucketRepository # Loads a preexisting BitBucketCredentials block BitBucketCredentials . load ( \"my-bitbucket-credentials-block\" ) # Creates a private BitBucket repository BitBucketRepository block private_repo = \"https://bitbucket.org/my-workspace/my-repository.git\" private_bitbucket_block = BitBucketRepository ( repository = private_repo , bitbucket_credentials = bitbucket_credentials_block ) # Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab) private_bitbucket_block . save ( name = \"my-private-bitbucket-block\" )","title":"Use a preexisting BitBucketCredentials block to create a BitBucketRepository block for a private repo"},{"location":"#resources","text":"If you encounter any bugs while using prefect-bitbucket , feel free to open an issue in the prefect-bitbucket repository. If you have any questions or issues while using prefect-bitbucket , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-bitbucket for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-bitbucket for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-bitbucket.git cd prefect-bitbucket/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_bitbucket.credentials Module to enable authenticate interactions with BitBucket. Classes BitBucketCredentials Bases: Block Store BitBucket credentials to interact with private BitBucket repositories. Attributes: Name Type Description token SecretStr An access token to authenticate with BitBucket. username Optional [ str ] Identification name unique across entire BitBucket site. Examples: Load stored BitBucket credentials: from prefect_bitbucket import BitBucketCredentials bitbucket_credentials_block = BitBucketCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_bitbucket/credentials.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class BitBucketCredentials ( Block ): \"\"\"Store BitBucket credentials to interact with private BitBucket repositories. Attributes: token: An access token to authenticate with BitBucket. username: Identification name unique across entire BitBucket site. Examples: Load stored BitBucket credentials: ```python from prefect_bitbucket import BitBucketCredentials bitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"BitBucket Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250\" # noqa token : SecretStr = Field ( name = \"Personal Access Token\" , default = None , description = \"A BitBucket Personal Access Token.\" , ) username : Optional [ str ] = Field ( default = None , description = \"Identification name unique across entire BitBucket site.\" , ) @validator ( \"username\" ) def _validate_username ( cls , value : str ) -> str : \"\"\"When username provided, will validate it.\"\"\" pattern = \"^[A-Za-z0-9_-]*$\" if not re . match ( pattern , value ): raise ValueError ( \"Username must be alpha, num, dash and/or underscore only.\" ) if not len ( value ) <= 30 : raise ValueError ( \"Username cannot be longer than 30 chars.\" ) return value","title":"Credentials"},{"location":"credentials/#prefect_bitbucket.credentials","text":"Module to enable authenticate interactions with BitBucket.","title":"credentials"},{"location":"credentials/#prefect_bitbucket.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_bitbucket.credentials.BitBucketCredentials","text":"Bases: Block Store BitBucket credentials to interact with private BitBucket repositories. Attributes: Name Type Description token SecretStr An access token to authenticate with BitBucket. username Optional [ str ] Identification name unique across entire BitBucket site. Examples: Load stored BitBucket credentials: from prefect_bitbucket import BitBucketCredentials bitbucket_credentials_block = BitBucketCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_bitbucket/credentials.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class BitBucketCredentials ( Block ): \"\"\"Store BitBucket credentials to interact with private BitBucket repositories. Attributes: token: An access token to authenticate with BitBucket. username: Identification name unique across entire BitBucket site. Examples: Load stored BitBucket credentials: ```python from prefect_bitbucket import BitBucketCredentials bitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"BitBucket Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250\" # noqa token : SecretStr = Field ( name = \"Personal Access Token\" , default = None , description = \"A BitBucket Personal Access Token.\" , ) username : Optional [ str ] = Field ( default = None , description = \"Identification name unique across entire BitBucket site.\" , ) @validator ( \"username\" ) def _validate_username ( cls , value : str ) -> str : \"\"\"When username provided, will validate it.\"\"\" pattern = \"^[A-Za-z0-9_-]*$\" if not re . match ( pattern , value ): raise ValueError ( \"Username must be alpha, num, dash and/or underscore only.\" ) if not len ( value ) <= 30 : raise ValueError ( \"Username cannot be longer than 30 chars.\" ) return value","title":"BitBucketCredentials"},{"location":"repository/","text":"prefect_bitbucket.repository Allows for interaction with a BitBucket repository. The BitBucket class in this collection is a storage block that lets Prefect agents pull Prefect flow code from BitBucket repositories. The BitBucket block is ideally configured via the Prefect UI, but can also be used in Python as the following examples demonstrate. Examples ```python from prefect_bitbucket.repository import BitBucketRepository public BitBucket repository public_bitbucket_block = BitBucketRepository( repository=\"https://bitbucket.com/my-project/my-repository.git\" ) public_bitbucket_block.save(name=\"my-bitbucket-block\") specific branch or tag branch_bitbucket_block = BitBucketRepository( reference=\"branch-or-tag-name\", repository=\"https://bitbucket.com/my-project/my-repository.git\" ) branch_bitbucket_block.save(name=\"my-bitbucket-block\") private BitBucket repository private_bitbucket_block = BitBucketRepository( repository=\"https://bitbucket.com/my-project/my-repository.git\", bitbucket_credentials=BitBucketCredentials.load(\"my-bitbucket-credentials-block\") ) private_bitbucket_block.save(name=\"my-private-bitbucket-block\") Classes BitBucketRepository Bases: ReadableDeploymentStorage Interact with files stored in BitBucket repositories. An accessible installation of git is required for this block to function properly. Source code in prefect_bitbucket/repository.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 class BitBucketRepository ( ReadableDeploymentStorage ): \"\"\"Interact with files stored in BitBucket repositories. An accessible installation of git is required for this block to function properly. \"\"\" _block_type_name = \"BitBucket Repository\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250\" # noqa _description = \"Interact with files stored in BitBucket repositories.\" repository : str = Field ( default =... , description = \"The URL of a BitBucket repository to read from in HTTPS format\" , ) reference : Optional [ str ] = Field ( default = None , description = \"An optional reference to pin to; can be a branch or tag.\" , ) bitbucket_credentials : Optional [ BitBucketCredentials ] = Field ( default = None , description = ( \"An optional BitBucketCredentials block for authenticating with \" \"private BitBucket repos.\" ), ) @validator ( \"bitbucket_credentials\" ) def _ensure_credentials_go_with_https ( cls , v : str , values : dict ) -> str : \"\"\"Ensure that credentials are not provided with 'SSH' formatted BitBucket URLs. Validators are by default only called on provided arguments. Note: validates `credentials` specifically so that it only fires when private repositories are used. \"\"\" if v is not None : if urlparse ( values [ \"repository\" ]) . scheme != \"https\" : raise InvalidRepositoryURLError ( ( \"Credentials can only be used with BitBucket repositories \" \"using the 'HTTPS' format. You must either remove the \" \"credential if you wish to use the 'SSH' format and are not \" \"using a private repository, or you must change the repository \" \"URL to the 'HTTPS' format.\" ) ) return v def _create_repo_url ( self ) -> str : \"\"\"Format the URL provided to the `git clone` command. For private repos: https://x-token-auth:<access-token>@bitbucket.org/<user>/<repo>.git All other repos should be the same as `self.repository`. \"\"\" url_components = urlparse ( self . repository ) if url_components . scheme == \"https\" and self . bitbucket_credentials is not None : token = self . bitbucket_credentials . token . get_secret_value () updated_components = url_components . _replace ( netloc = f \"x-token-auth: { token } @ { url_components . netloc } \" ) full_url = urlunparse ( updated_components ) else : full_url = self . repository return full_url @staticmethod def _get_paths ( dst_dir : Union [ str , None ], src_dir : str , sub_directory : Optional [ str ] ) -> Tuple [ str , str ]: \"\"\"Return the fully formed paths for BitBucketRepository contents. Return will take the form of (content_source, content_destination). \"\"\" if dst_dir is None : content_destination = Path ( \".\" ) . absolute () else : content_destination = Path ( dst_dir ) content_source = Path ( src_dir ) if sub_directory : content_destination = content_destination . joinpath ( sub_directory ) content_source = content_source . joinpath ( sub_directory ) return str ( content_source ), str ( content_destination ) @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\"Clones a BitBucket project specified in `from_path` to the provided `local_path`. This defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # Construct command cmd = [ \"git\" , \"clone\" , self . _create_repo_url ()] if self . reference : cmd += [ \"-b\" , self . reference ] # Limit git history cmd += [ \"--depth\" , \"1\" ] # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : cmd . append ( tmp_dir ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise OSError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_dir , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination ) Functions get_directory async Clones a BitBucket project specified in from_path to the provided local_path . This defaults to cloning the repository reference configured on the Block to the present working directory. Parameters: Name Type Description Default from_path Optional [ str ] If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. None local_path Optional [ str ] A local path to clone to; defaults to present working directory. None Source code in prefect_bitbucket/repository.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\"Clones a BitBucket project specified in `from_path` to the provided `local_path`. This defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # Construct command cmd = [ \"git\" , \"clone\" , self . _create_repo_url ()] if self . reference : cmd += [ \"-b\" , self . reference ] # Limit git history cmd += [ \"--depth\" , \"1\" ] # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : cmd . append ( tmp_dir ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise OSError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_dir , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination )","title":"Repository"},{"location":"repository/#prefect_bitbucket.repository","text":"Allows for interaction with a BitBucket repository. The BitBucket class in this collection is a storage block that lets Prefect agents pull Prefect flow code from BitBucket repositories. The BitBucket block is ideally configured via the Prefect UI, but can also be used in Python as the following examples demonstrate. Examples ```python from prefect_bitbucket.repository import BitBucketRepository","title":"repository"},{"location":"repository/#prefect_bitbucket.repository--public-bitbucket-repository","text":"public_bitbucket_block = BitBucketRepository( repository=\"https://bitbucket.com/my-project/my-repository.git\" ) public_bitbucket_block.save(name=\"my-bitbucket-block\")","title":"public BitBucket repository"},{"location":"repository/#prefect_bitbucket.repository--specific-branch-or-tag","text":"branch_bitbucket_block = BitBucketRepository( reference=\"branch-or-tag-name\", repository=\"https://bitbucket.com/my-project/my-repository.git\" ) branch_bitbucket_block.save(name=\"my-bitbucket-block\")","title":"specific branch or tag"},{"location":"repository/#prefect_bitbucket.repository--private-bitbucket-repository","text":"private_bitbucket_block = BitBucketRepository( repository=\"https://bitbucket.com/my-project/my-repository.git\", bitbucket_credentials=BitBucketCredentials.load(\"my-bitbucket-credentials-block\") ) private_bitbucket_block.save(name=\"my-private-bitbucket-block\")","title":"private BitBucket repository"},{"location":"repository/#prefect_bitbucket.repository-classes","text":"","title":"Classes"},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository","text":"Bases: ReadableDeploymentStorage Interact with files stored in BitBucket repositories. An accessible installation of git is required for this block to function properly. Source code in prefect_bitbucket/repository.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 class BitBucketRepository ( ReadableDeploymentStorage ): \"\"\"Interact with files stored in BitBucket repositories. An accessible installation of git is required for this block to function properly. \"\"\" _block_type_name = \"BitBucket Repository\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250\" # noqa _description = \"Interact with files stored in BitBucket repositories.\" repository : str = Field ( default =... , description = \"The URL of a BitBucket repository to read from in HTTPS format\" , ) reference : Optional [ str ] = Field ( default = None , description = \"An optional reference to pin to; can be a branch or tag.\" , ) bitbucket_credentials : Optional [ BitBucketCredentials ] = Field ( default = None , description = ( \"An optional BitBucketCredentials block for authenticating with \" \"private BitBucket repos.\" ), ) @validator ( \"bitbucket_credentials\" ) def _ensure_credentials_go_with_https ( cls , v : str , values : dict ) -> str : \"\"\"Ensure that credentials are not provided with 'SSH' formatted BitBucket URLs. Validators are by default only called on provided arguments. Note: validates `credentials` specifically so that it only fires when private repositories are used. \"\"\" if v is not None : if urlparse ( values [ \"repository\" ]) . scheme != \"https\" : raise InvalidRepositoryURLError ( ( \"Credentials can only be used with BitBucket repositories \" \"using the 'HTTPS' format. You must either remove the \" \"credential if you wish to use the 'SSH' format and are not \" \"using a private repository, or you must change the repository \" \"URL to the 'HTTPS' format.\" ) ) return v def _create_repo_url ( self ) -> str : \"\"\"Format the URL provided to the `git clone` command. For private repos: https://x-token-auth:<access-token>@bitbucket.org/<user>/<repo>.git All other repos should be the same as `self.repository`. \"\"\" url_components = urlparse ( self . repository ) if url_components . scheme == \"https\" and self . bitbucket_credentials is not None : token = self . bitbucket_credentials . token . get_secret_value () updated_components = url_components . _replace ( netloc = f \"x-token-auth: { token } @ { url_components . netloc } \" ) full_url = urlunparse ( updated_components ) else : full_url = self . repository return full_url @staticmethod def _get_paths ( dst_dir : Union [ str , None ], src_dir : str , sub_directory : Optional [ str ] ) -> Tuple [ str , str ]: \"\"\"Return the fully formed paths for BitBucketRepository contents. Return will take the form of (content_source, content_destination). \"\"\" if dst_dir is None : content_destination = Path ( \".\" ) . absolute () else : content_destination = Path ( dst_dir ) content_source = Path ( src_dir ) if sub_directory : content_destination = content_destination . joinpath ( sub_directory ) content_source = content_source . joinpath ( sub_directory ) return str ( content_source ), str ( content_destination ) @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\"Clones a BitBucket project specified in `from_path` to the provided `local_path`. This defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # Construct command cmd = [ \"git\" , \"clone\" , self . _create_repo_url ()] if self . reference : cmd += [ \"-b\" , self . reference ] # Limit git history cmd += [ \"--depth\" , \"1\" ] # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : cmd . append ( tmp_dir ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise OSError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_dir , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination )","title":"BitBucketRepository"},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository-functions","text":"","title":"Functions"},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository.get_directory","text":"Clones a BitBucket project specified in from_path to the provided local_path . This defaults to cloning the repository reference configured on the Block to the present working directory. Parameters: Name Type Description Default from_path Optional [ str ] If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. None local_path Optional [ str ] A local path to clone to; defaults to present working directory. None Source code in prefect_bitbucket/repository.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\"Clones a BitBucket project specified in `from_path` to the provided `local_path`. This defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # Construct command cmd = [ \"git\" , \"clone\" , self . _create_repo_url ()] if self . reference : cmd += [ \"-b\" , self . reference ] # Limit git history cmd += [ \"--depth\" , \"1\" ] # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : cmd . append ( tmp_dir ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise OSError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_dir , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination )","title":"get_directory()"}]}