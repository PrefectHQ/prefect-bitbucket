{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-bitbucket","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations for working with Bitbucket repositories.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-bitbucket</code> with <code>pip</code>:</p> <pre><code>pip install prefect-bitbucket\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_bitbucket\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":""},{"location":"#load-a-pre-existing-bitbucketcredentials-block","title":"Load a pre-existing BitBucketCredentials block","text":"<pre><code>from prefect import flow\nfrom prefect_bitbucket.credentials import BitBucketCredentials\n\n@flow\ndef use_stored_bitbucket_creds_flow():\n    bitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n\n    return bitbucket_credentials_block\n\nuse_stored_bitbucket_creds_flow()\n</code></pre>"},{"location":"#create-a-new-bitbucketcredentials-block-in-a-flow","title":"Create a new BitBucketCredentials block in a flow","text":"<pre><code>from prefect import flow\nfrom prefect_bitbucket.credentials import BitBucketCredentials\n\n@flow\ndef create_new_bitbucket_creds_flow():\n    bitbucket_credentials_block = BitBucketCredentials(\n        token=\"my-token\",\n        username=\"my-username\"\n    )\n\ncreate_new_bitbucket_creds_flow()\n</code></pre>"},{"location":"#create-a-bitbucketrepository-block-for-a-public-repo","title":"Create a BitBucketRepository block for a public repo","text":"<pre><code>from prefect_bitbucket import BitBucketRepository\n\npublic_repo = \"https://bitbucket.org/my-workspace/my-repository.git\"\n\n# Creates a public BitBucket repository BitBucketRepository block\npublic_bitbucket_block = BitBucketRepository(\n    repository=public_repo\n)\n\n# Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab)\npublic_bitbucket_block.save(\"my-bitbucket-block\")\n</code></pre>"},{"location":"#create-a-bitbucketrepository-block-for-a-public-repo-at-a-specific-branch-or-tag","title":"Create a BitBucketRepository block for a public repo at a specific branch or tag","text":"<pre><code>from prefect_bitbucket import BitBucketRepository\n\npublic_repo = \"https://bitbucket.org/my-workspace/my-repository.git\"\n\n# Creates a public BitBucket repository BitBucketRepository block\nbranch_bitbucket_block = BitBucketRepository(\n    reference=\"my-branch-or-tag\",  # e.g \"master\"\n    repository=public_repo\n)\n\n# Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab)\nbranch_bitbucket_block.save(\"my-bitbucket-branch-block\")\n</code></pre>"},{"location":"#create-a-new-bitbucketcredentials-block-and-a-bitbucketrepository-block-for-a-private-repo","title":"Create a new BitBucketCredentials block and a BitBucketRepository block for a private repo","text":"<pre><code>from prefect_bitbucket import BitBucketCredentials, BitBucketRepository\n\n# For a private repo, we need credentials to access it\nbitbucket_credentials_block = BitBucketCredentials(\n    token=\"my-token\",\n    username=\"my-username\"  # optional\n)\n\n# Saves the BitBucketCredentials block to your Prefect workspace (in the Blocks tab)\nbitbucket_credentials_block.save(name=\"my-bitbucket-credentials-block\")\n\n\n# Creates a private BitBucket repository BitBucketRepository block\nprivate_repo = \"https://bitbucket.org/my-workspace/my-repository.git\"\nprivate_bitbucket_block = BitBucketRepository(\n    repository=private_repo,\n    bitbucket_credentials=bitbucket_credentials_block\n)\n\n# Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab)\nprivate_bitbucket_block.save(name=\"my-private-bitbucket-block\")\n</code></pre>"},{"location":"#use-a-preexisting-bitbucketcredentials-block-to-create-a-bitbucketrepository-block-for-a-private-repo","title":"Use a preexisting BitBucketCredentials block to create a BitBucketRepository block for a private repo","text":"<pre><code>from prefect_bitbucket import BitBucketCredentials, BitBucketRepository\n\n# Loads a preexisting BitBucketCredentials block\nBitBucketCredentials.load(\"my-bitbucket-credentials-block\")\n\n# Creates a private BitBucket repository BitBucketRepository block\nprivate_repo = \"https://bitbucket.org/my-workspace/my-repository.git\"\nprivate_bitbucket_block = BitBucketRepository(\n    repository=private_repo,\n    bitbucket_credentials=bitbucket_credentials_block\n)\n\n# Saves the BitBucketRepository block to your Prefect workspace (in the Blocks tab)\nprivate_bitbucket_block.save(name=\"my-private-bitbucket-block\")\n</code></pre> <p>Differences between Bitbucket Server and Bitbucket Cloud</p> <p>For Bitbucket Cloud, only set the <code>token</code> to authenticate. For Bitbucket Server, set both the <code>token</code> and the <code>username</code>.</p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-bitbucket</code>, feel free to open an issue in the prefect-bitbucket repository.</p> <p>If you have any questions or issues while using <code>prefect-bitbucket</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-bitbucket</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-bitbucket</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-bitbucket.git\n\ncd prefect-bitbucket/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_bitbucket.credentials","title":"<code>prefect_bitbucket.credentials</code>","text":"<p>Module to enable authenticate interactions with BitBucket.</p>"},{"location":"credentials/#prefect_bitbucket.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_bitbucket.credentials.BitBucketCredentials","title":"<code>BitBucketCredentials</code>","text":"<p>             Bases: <code>CredentialsBlock</code></p> <p>Store BitBucket credentials to interact with private BitBucket repositories.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>Optional[SecretStr]</code> <p>An access token to authenticate with BitBucket. This is required for accessing private repositories.</p> <code>username</code> <code>Optional[str]</code> <p>Identification name unique across entire BitBucket site.</p> <code>password</code> <code>Optional[SecretStr]</code> <p>The password to authenticate to BitBucket.</p> <code>url</code> <code>str</code> <p>The base URL of your BitBucket instance.</p> <p>Examples:</p> <p>Load stored BitBucket credentials: <pre><code>from prefect_bitbucket import BitBucketCredentials\nbitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_bitbucket/credentials.py</code> <pre><code>class BitBucketCredentials(CredentialsBlock):\n    \"\"\"Store BitBucket credentials to interact with private BitBucket repositories.\n\n    Attributes:\n        token: An access token to authenticate with BitBucket. This is required\n            for accessing private repositories.\n        username: Identification name unique across entire BitBucket site.\n        password: The password to authenticate to BitBucket.\n        url: The base URL of your BitBucket instance.\n\n\n    Examples:\n        Load stored BitBucket credentials:\n        ```python\n        from prefect_bitbucket import BitBucketCredentials\n        bitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n        ```\n\n\n    \"\"\"\n\n    _block_type_name = \"BitBucket Credentials\"\n    _logo_url = \"https://cdn.sanity.io/images/3ugk85nk/production/5d729f7355fb6828c4b605268ded9cfafab3ae4f-250x250.png\"  # noqa\n    token: Optional[SecretStr] = Field(\n        name=\"Personal Access Token\",\n        default=None,\n        description=(\n            \"A BitBucket Personal Access Token - required for private repositories.\"\n        ),\n        example=\"x-token-auth:my-token\",\n    )\n    username: Optional[str] = Field(\n        default=None,\n        description=\"Identification name unique across entire BitBucket site.\",\n    )\n    password: Optional[SecretStr] = Field(\n        default=None, description=\"The password to authenticate to BitBucket.\"\n    )\n    url: str = Field(\n        default=\"https://api.bitbucket.org/\",\n        description=\"The base URL of your BitBucket instance.\",\n        title=\"URL\",\n    )\n\n    @validator(\"username\")\n    def _validate_username(cls, value: str) -&gt; str:\n        \"\"\"When username provided, will validate it.\"\"\"\n        pattern = \"^[A-Za-z0-9_-]*$\"\n\n        if not re.match(pattern, value):\n            raise ValueError(\n                \"Username must be alpha, num, dash and/or underscore only.\"\n            )\n        if not len(value) &lt;= 30:\n            raise ValueError(\"Username cannot be longer than 30 chars.\")\n        return value\n\n    def get_client(\n        self, client_type: Union[str, ClientType], **client_kwargs\n    ) -&gt; Union[Cloud, Bitbucket]:\n        \"\"\"Get an authenticated local or cloud Bitbucket client.\n\n        Args:\n            client_type: Whether to use a local or cloud client.\n\n        Returns:\n            An authenticated Bitbucket client.\n\n        \"\"\"\n        # ref: https://atlassian-python-api.readthedocs.io/\n        if isinstance(client_type, str):\n            client_type = ClientType(client_type.lower())\n\n        password = self.password.get_secret_value()\n        input_client_kwargs = dict(\n            url=self.url, username=self.username, password=password\n        )\n        input_client_kwargs.update(**client_kwargs)\n\n        if client_type == ClientType.CLOUD:\n            client = Cloud(**input_client_kwargs)\n        else:\n            client = Bitbucket(**input_client_kwargs)\n        return client\n</code></pre>"},{"location":"credentials/#prefect_bitbucket.credentials.BitBucketCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_bitbucket.credentials.BitBucketCredentials.get_client","title":"<code>get_client</code>","text":"<p>Get an authenticated local or cloud Bitbucket client.</p> <p>Parameters:</p> Name Type Description Default <code>client_type</code> <code>Union[str, ClientType]</code> <p>Whether to use a local or cloud client.</p> required <p>Returns:</p> Type Description <code>Union[Cloud, Bitbucket]</code> <p>An authenticated Bitbucket client.</p> Source code in <code>prefect_bitbucket/credentials.py</code> <pre><code>def get_client(\n    self, client_type: Union[str, ClientType], **client_kwargs\n) -&gt; Union[Cloud, Bitbucket]:\n    \"\"\"Get an authenticated local or cloud Bitbucket client.\n\n    Args:\n        client_type: Whether to use a local or cloud client.\n\n    Returns:\n        An authenticated Bitbucket client.\n\n    \"\"\"\n    # ref: https://atlassian-python-api.readthedocs.io/\n    if isinstance(client_type, str):\n        client_type = ClientType(client_type.lower())\n\n    password = self.password.get_secret_value()\n    input_client_kwargs = dict(\n        url=self.url, username=self.username, password=password\n    )\n    input_client_kwargs.update(**client_kwargs)\n\n    if client_type == ClientType.CLOUD:\n        client = Cloud(**input_client_kwargs)\n    else:\n        client = Bitbucket(**input_client_kwargs)\n    return client\n</code></pre>"},{"location":"credentials/#prefect_bitbucket.credentials.ClientType","title":"<code>ClientType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The client type to use.</p> Source code in <code>prefect_bitbucket/credentials.py</code> <pre><code>class ClientType(Enum):\n    \"\"\"The client type to use.\"\"\"\n\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"\n</code></pre>"},{"location":"repository/","title":"Repository","text":""},{"location":"repository/#prefect_bitbucket.repository","title":"<code>prefect_bitbucket.repository</code>","text":"<p>Allows for interaction with a BitBucket repository.</p> <p>The <code>BitBucket</code> class in this collection is a storage block that lets Prefect agents pull Prefect flow code from BitBucket repositories.</p> <p>The <code>BitBucket</code> block is ideally configured via the Prefect UI, but can also be used in Python as the following examples demonstrate.</p> <p>Examples ```python from prefect_bitbucket.repository import BitBucketRepository</p>"},{"location":"repository/#prefect_bitbucket.repository--public-bitbucket-repository","title":"public BitBucket repository","text":"<p>public_bitbucket_block = BitBucketRepository(     repository=\"https://bitbucket.com/my-project/my-repository.git\" )</p> <p>public_bitbucket_block.save(name=\"my-bitbucket-block\")</p>"},{"location":"repository/#prefect_bitbucket.repository--specific-branch-or-tag","title":"specific branch or tag","text":"<p>branch_bitbucket_block = BitBucketRepository(     reference=\"branch-or-tag-name\",     repository=\"https://bitbucket.com/my-project/my-repository.git\" )</p> <p>branch_bitbucket_block.save(name=\"my-bitbucket-block\")</p>"},{"location":"repository/#prefect_bitbucket.repository--private-bitbucket-repository","title":"private BitBucket repository","text":"<p>private_bitbucket_block = BitBucketRepository(     repository=\"https://bitbucket.com/my-project/my-repository.git\",     bitbucket_credentials=BitBucketCredentials.load(\"my-bitbucket-credentials-block\") )</p> <p>private_bitbucket_block.save(name=\"my-private-bitbucket-block\")</p>"},{"location":"repository/#prefect_bitbucket.repository-classes","title":"Classes","text":""},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository","title":"<code>BitBucketRepository</code>","text":"<p>             Bases: <code>ReadableDeploymentStorage</code></p> <p>Interact with files stored in BitBucket repositories.</p> <p>An accessible installation of git is required for this block to function properly.</p> Source code in <code>prefect_bitbucket/repository.py</code> <pre><code>class BitBucketRepository(ReadableDeploymentStorage):\n    \"\"\"Interact with files stored in BitBucket repositories.\n\n    An accessible installation of git is required for this block to function\n    properly.\n    \"\"\"\n\n    _block_type_name = \"BitBucket Repository\"\n    _logo_url = \"https://cdn.sanity.io/images/3ugk85nk/production/5d729f7355fb6828c4b605268ded9cfafab3ae4f-250x250.png\"  # noqa\n    _description = \"Interact with files stored in BitBucket repositories.\"\n\n    repository: str = Field(\n        default=...,\n        description=\"The URL of a BitBucket repository to read from in HTTPS format\",\n    )\n    reference: Optional[str] = Field(\n        default=None,\n        description=\"An optional reference to pin to; can be a branch or tag.\",\n    )\n    bitbucket_credentials: Optional[BitBucketCredentials] = Field(\n        default=None,\n        description=(\n            \"An optional BitBucketCredentials block for authenticating with \"\n            \"private BitBucket repos.\"\n        ),\n    )\n\n    @validator(\"bitbucket_credentials\")\n    def _ensure_credentials_go_with_https(cls, v: str, values: dict) -&gt; str:\n        \"\"\"Ensure that credentials are not provided with 'SSH' formatted BitBucket URLs.\n\n        Validators are by default only called on provided arguments.\n\n        Note: validates `credentials` specifically so that it only fires when private\n        repositories are used.\n        \"\"\"\n        if v is not None:\n            if urlparse(values[\"repository\"]).scheme != \"https\":\n                raise InvalidRepositoryURLError(\n                    (\n                        \"Credentials can only be used with BitBucket repositories \"\n                        \"using the 'HTTPS' format. You must either remove the \"\n                        \"credential if you wish to use the 'SSH' format and are not \"\n                        \"using a private repository, or you must change the repository \"\n                        \"URL to the 'HTTPS' format.\"\n                    )\n                )\n\n        return v\n\n    def _create_repo_url(self) -&gt; str:\n        \"\"\"Format the URL provided to the `git clone` command.\n\n        For private repos in the cloud:\n        https://x-token-auth:&lt;access-token&gt;@bitbucket.org/&lt;user&gt;/&lt;repo&gt;.git\n        For private repos with a local bitbucket server:\n        https://&lt;username&gt;:&lt;access-token&gt;@&lt;server&gt;/scm/&lt;project&gt;/&lt;repo&gt;.git\n\n        All other repos should be the same as `self.repository`.\n        \"\"\"\n        url_components = urlparse(self.repository)\n        token_is_set = (\n            self.bitbucket_credentials is not None and self.bitbucket_credentials.token\n        )\n\n        # Need a token for private repos\n        if url_components.scheme == \"https\" and token_is_set:\n            token = self.bitbucket_credentials.token.get_secret_value()\n            username = self.bitbucket_credentials.username\n            if username is None:\n                username = \"x-token-auth\"\n            updated_components = url_components._replace(\n                netloc=f\"{username}:{token}@{url_components.netloc}\"\n            )\n            full_url = urlunparse(updated_components)\n        else:\n            full_url = self.repository\n\n        return full_url\n\n    @staticmethod\n    def _get_paths(\n        dst_dir: Union[str, None], src_dir: str, sub_directory: Optional[str]\n    ) -&gt; Tuple[str, str]:\n        \"\"\"Return the fully formed paths for BitBucketRepository contents.\n\n        Return will take the form of (content_source, content_destination).\n\n        \"\"\"\n        if dst_dir is None:\n            content_destination = Path(\".\").absolute()\n        else:\n            content_destination = Path(dst_dir)\n\n        content_source = Path(src_dir)\n\n        if sub_directory:\n            content_destination = content_destination.joinpath(sub_directory)\n            content_source = content_source.joinpath(sub_directory)\n\n        return str(content_source), str(content_destination)\n\n    @sync_compatible\n    async def get_directory(\n        self, from_path: Optional[str] = None, local_path: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Clones a BitBucket project within `from_path` to the provided `local_path`.\n\n        This defaults to cloning the repository reference configured on the\n        Block to the present working directory.\n\n        Args:\n            from_path: If provided, interpreted as a subdirectory of the underlying\n                repository that will be copied to the provided local path.\n            local_path: A local path to clone to; defaults to present working directory.\n\n        \"\"\"\n        # Construct command\n        cmd = [\"git\", \"clone\", self._create_repo_url()]\n        if self.reference:\n            cmd += [\"-b\", self.reference]\n\n        # Limit git history\n        cmd += [\"--depth\", \"1\"]\n\n        # Clone to a temporary directory and move the subdirectory over\n        with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n            cmd.append(tmp_dir)\n\n            err_stream = io.StringIO()\n            out_stream = io.StringIO()\n            process = await run_process(cmd, stream_output=(out_stream, err_stream))\n            if process.returncode != 0:\n                err_stream.seek(0)\n                raise OSError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n            content_source, content_destination = self._get_paths(\n                dst_dir=local_path, src_dir=tmp_dir, sub_directory=from_path\n            )\n\n            copy_tree(src=content_source, dst=content_destination)\n</code></pre>"},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository-functions","title":"Functions","text":""},{"location":"repository/#prefect_bitbucket.repository.BitBucketRepository.get_directory","title":"<code>get_directory</code>  <code>async</code>","text":"<p>Clones a BitBucket project within <code>from_path</code> to the provided <code>local_path</code>.</p> <p>This defaults to cloning the repository reference configured on the Block to the present working directory.</p> <p>Parameters:</p> Name Type Description Default <code>from_path</code> <code>Optional[str]</code> <p>If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path.</p> <code>None</code> <code>local_path</code> <code>Optional[str]</code> <p>A local path to clone to; defaults to present working directory.</p> <code>None</code> Source code in <code>prefect_bitbucket/repository.py</code> <pre><code>@sync_compatible\nasync def get_directory(\n    self, from_path: Optional[str] = None, local_path: Optional[str] = None\n) -&gt; None:\n    \"\"\"Clones a BitBucket project within `from_path` to the provided `local_path`.\n\n    This defaults to cloning the repository reference configured on the\n    Block to the present working directory.\n\n    Args:\n        from_path: If provided, interpreted as a subdirectory of the underlying\n            repository that will be copied to the provided local path.\n        local_path: A local path to clone to; defaults to present working directory.\n\n    \"\"\"\n    # Construct command\n    cmd = [\"git\", \"clone\", self._create_repo_url()]\n    if self.reference:\n        cmd += [\"-b\", self.reference]\n\n    # Limit git history\n    cmd += [\"--depth\", \"1\"]\n\n    # Clone to a temporary directory and move the subdirectory over\n    with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n        cmd.append(tmp_dir)\n\n        err_stream = io.StringIO()\n        out_stream = io.StringIO()\n        process = await run_process(cmd, stream_output=(out_stream, err_stream))\n        if process.returncode != 0:\n            err_stream.seek(0)\n            raise OSError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n        content_source, content_destination = self._get_paths(\n            dst_dir=local_path, src_dir=tmp_dir, sub_directory=from_path\n        )\n\n        copy_tree(src=content_source, dst=content_destination)\n</code></pre>"}]}